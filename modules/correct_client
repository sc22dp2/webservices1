import requests

session = requests.Session()

def get_csrf():
    """
    Fetch a CSRF cookie from the server by making a GET request to an endpoint
    that sets the csrftoken cookie. Adjust the URI to whichever URL returns
    the cookie in your backend.
    """
    uri = "http://127.0.0.1:8000/csrf/"  # Example endpoint; adapt to your project
    try:
        response = session.get(uri)
        if response.status_code == 200:
            token = session.cookies.get("csrftoken", None)
            if token:
                print(f"CSRF token fetched successfully: {token}")
            else:
                print("No CSRF token found in session cookies.")
        else:
            print("Failed to fetch CSRF token:", response.text)
    except Exception as e:
        print("Error fetching CSRF token:", e)


def register():
    print("Creating New User:")
    username = input("Username:")
    email = input("Email:")
    password = input("Password:")
    data = {"username": username, "email": email, "password": password}
    uri = "http://127.0.0.1:8000/register/"

    # 1) Fetch the CSRF token
    get_csrf()

    # 2) Retrieve the token from the session and add to headers
    csrf_token = session.cookies.get("csrftoken", "")
    headers = {"X-CSRFToken": csrf_token}

    try:
        response = session.post(uri, json=data, headers=headers)
        if response.status_code == 201:
            print("The registration was successful")
        else:
            print("The registration failed:", response.text)
    except Exception as e:
        print("Error:", e)


def login(url):
    global session
    print("Login User:")
    username = input("Username:")
    password = input("Password:")
    data = {"username": username, "password": password}
    uri = f"http://127.0.0.1:8000/login/"

    # 1) Fetch the CSRF token
    get_csrf()

    # 2) Retrieve the token and add to headers
    csrf_token = session.cookies.get("csrftoken", "")
    headers = {"X-CSRFToken": csrf_token}

    try:
        response = session.post(uri, json=data, headers=headers)
        if response.status_code == 200:
            print("The login was successful")
        else:
            print("The login failed:", response.text)
            session = None
    except Exception as e:
        print("Error:", e)


def logout():
    uri = "http://127.0.0.1:8000/logout/"
    global session

    # 1) Fetch the CSRF token
    get_csrf()

    # 2) Retrieve the token and add to headers
    csrf_token = session.cookies.get("csrftoken", "")
    headers = {"X-CSRFToken": csrf_token}

    try:
        response = session.post(uri, headers=headers)
        if response.status_code == 200:
            print("The logout was successful")
        else:
            print("The logout failed:", response.text)
    except Exception as e:
        print("Error:", e)


def list_instances():
    uri = "http://127.0.0.1:8000/list/"
    try:
        response = session.get(uri)
        if response.status_code == 200:
            data = response.json()
            print("code | name | year | semester | professors\n")
            for instance in data:
                code = instance["code"]
                module = instance["module"]
                year = instance["year"]
                semester = instance["semester"]
                professors = instance["professors"]
                print(f"{code} | {module} | {year} | {semester} | {professors}\n")
        else:
            print("Error:" + response.text)
    except Exception as e:
        print("Error:", e)


def to_stars(rating):
    return "*" * rating


def view():
    uri = "http://127.0.0.1:8000/view/"
    try:
        response = session.get(uri)
        if response.status_code == 200:
            data = response.json()
            for instance in data:
                full_name = instance["full_name"]
                rating = instance["average_rating"]
                star_rating = to_stars(rating)
                professor_id = instance["professor_id"]
                print(f"The rating of Professor {full_name}({professor_id}) is {star_rating}")
        else:
            print("Error:" + response.text)
    except Exception as e:
        print("Error:", e)


def average(professor_id, module_code):
    uri = f"http://127.0.0.1:8000/average/?professor_id={professor_id}&module_code={module_code}"
    try:
        response = session.get(uri)
        data = response.json()
        if response.status_code == 200:
            full_name = data["professor"]
            module = data["module"]
            rating = data["average_rating"]
            star_rating = to_stars(rating)
            print(f"The rating of {full_name} ({professor_id}) in module {module} ({module_code}) is {star_rating}")
        else:
            print("Error:" + response.text)
    except Exception as e:
        print("Error:", e)


def rate(professor_id, module_code, year, semester, rating):
    uri = "http://127.0.0.1:8000/rate/"
    data = {
        "professor_id": professor_id,
        "module_code": module_code,
        "year": year,
        "semester": semester,
        "rating": rating
    }
    try:
        year = int(year)
        semester = int(semester)
        rating = int(rating)
    except ValueError:
        print("<Year>, <Semester> and <Rating> should be integers")
        return

    if rating < 1 or rating > 5:
        print("<Rating> should be an integer between 1-5")
        return

    # 1) Fetch the CSRF token
    get_csrf()

    # 2) Retrieve the token and add to headers
    csrf_token = session.cookies.get("csrftoken", "")
    headers = {"X-CSRFToken": csrf_token}

    try:
        response = session.post(uri, json=data, headers=headers)
        if response.status_code == 201:
            print("Rating was successful")
        else:
            print("Error:" + response.text)
    except Exception as e:
        print("Exception occurred:", e)


def main():
    while True:
        command = input("Enter command:")
        command_parts = command.split()
        if not command_parts:
            continue
        action = command_parts[0]

        if action == "register":
            if len(command_parts) != 1:
                print("Incorrect command usage. Please try: register")
            else:
                register()

        elif action == "login":
            if len(command_parts) != 2:
                print("Incorrect command usage. Please try: login <url>")
            else:
                login(command_parts[1])

        elif action == "logout":
            if len(command_parts) != 1:
                print("Incorrect command usage. Please try: logout")
            else:
                logout()

        elif action == "list":
            if len(command_parts) != 1:
                print("Incorrect command usage. Please try: list")
            else:
                list_instances()

        elif action == "view":
            if len(command_parts) != 1:
                print("Incorrect command usage. Please try: view")
            else:
                view()

        elif action == "average":
            if len(command_parts) != 3:
                print("Incorrect command usage. Please try: average <professor_id> <module_code>")
            else:
                average(command_parts[1], command_parts[2])

        elif action == "rate":
            if len(command_parts) != 6:
                print("Incorrect command usage. Please try: rate <professor_id> <module_code> <year> <semester> <rating>")
            else:
                rate(command_parts[1], command_parts[2], command_parts[3], command_parts[4], command_parts[5])

        else:
            print("Unknown command. Valid commands: register, login, logout, list, view, average, rate")


if __name__ == "__main__":
    main()
